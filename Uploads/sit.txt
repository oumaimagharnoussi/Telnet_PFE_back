using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Ticketback.Context;
using Ticketback.Models;

namespace Ticketback.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SiteController : ControllerBase
    {
        private readonly AppDbContext _authContext;

        public SiteController(AppDbContext appDbContext)
        {
            _authContext = appDbContext;
        }


        [HttpGet]
        public async Task<ActionResult<Site>> GetAllSites()
        {
            return Ok(await _authContext.Sites.ToListAsync());
        }

        [HttpPost]
        public async Task<IActionResult> AddSite(AddSiteRequest addSiteRequest)
        {
            var site = new Site()
            {

                libelle = addSiteRequest.libelle,

            };

            await _authContext.Sites.AddAsync(site);
            await _authContext.SaveChangesAsync();



            return Ok(site);
        }

        [HttpPut]
        [Route("{id:int}")]
        public async Task<IActionResult> UpdateSite([FromRoute] int id, UpdateSiteRequest updateSiteRequest)
        {
            var site = await _authContext.Sites.FindAsync(id);
            if (site != null)
            {
                site.libelle = updateSiteRequest.libelle;

                await _authContext.SaveChangesAsync();
                return Ok(site);
            }
            return NotFound();
        }

        [HttpGet]
        [Route("{id:int}")]
        public async Task<IActionResult> GetSite([FromRoute] int id)
        {
            var site = await _authContext.Sites.FindAsync(id);
            if (site == null)
            {
                return NotFound();
            }
            return Ok(site);

        }

        [HttpDelete]
        [Route("{id:int}")]
        public async Task<IActionResult> DeleteSite([FromRoute] int id)
        {
            var site = await _authContext.Sites.FindAsync(id);
            if (site != null)
            {
                _authContext.Remove(site);
                await _authContext.SaveChangesAsync();
                return Ok(site);
            }
            return NotFound();
        }
    }
}
